{"version":3,"sources":["logo.svg","components/Customer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Customer","customer","this","props","img","image","id","TableRow","TableCell","src","name","age","gender","job","React","Component","customers","head","App","classes","console","log","Paper","className","root","Table","table","TableHead","map","data","i","key","TableBody","Boolean","window","location","hostname","match","theme","createMuiTheme","typography","fontFamily","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,sKCuB5BC,E,uKAdX,IAAMC,EAAWC,KAAKC,MAAMF,SACtBG,EAAMF,KAAKC,MAAMF,SAASI,MAAMH,KAAKC,MAAMF,SAASK,GAC1D,OACE,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KAAaP,EAASK,IACpB,kBAACE,EAAA,EAAD,KAAY,yBAAKC,IAAKL,KACtB,kBAACI,EAAA,EAAD,KAAaP,EAASS,MACtB,kBAACF,EAAA,EAAD,KAAaP,EAASU,KACtB,kBAACH,EAAA,EAAD,KAAaP,EAASW,QACtB,kBAACJ,EAAA,EAAD,KAAaP,EAASY,U,GAXPC,IAAMC,W,gCCiBvBC,EAAY,CAChB,CACEV,GAAI,EACJI,KAAM,qBACNL,MAAO,8BACPM,IAAK,GACLC,OAAQ,SACRC,IAAK,sBAEN,CACCP,GAAI,EACJI,KAAM,qBACNL,MAAO,8BACPM,IAAK,GACLC,OAAQ,SACRC,IAAK,sBAEN,CACCP,GAAI,EACJI,KAAM,qBACNL,MAAO,8BACPM,IAAK,GACLC,OAAQ,SACRC,IAAK,sBAEN,CACCP,GAAI,EACJI,KAAM,qBACNL,MAAO,8BACPM,IAAK,GACLC,OAAQ,SACRC,IAAK,uBAIHI,EAAO,CACX,KAAK,eAAK,eAAK,eAAK,eAAK,gBAqCZC,E,uKAhCX,IAAMC,EAAUjB,KAAKC,MAErB,OADAiB,QAAQC,IAAIF,GAEZ,kBAACG,EAAA,EAAD,CAAOC,UAAWJ,EAAQK,MACxB,kBAACC,EAAA,EAAD,CAASF,UAAWJ,EAAQO,OAC1B,kBAACC,EAAA,EAAD,KACE,kBAACpB,EAAA,EAAD,KAEIU,EAAKW,KAAI,SAACC,EAAKC,GACb,OACE,kBAACtB,EAAA,EAAD,CAAWuB,IAAKD,GAAID,QAM9B,kBAACG,EAAA,EAAD,KAEIhB,EAAUY,KAAI,SAACC,EAAKC,GAClB,OACE,kBAAC,EAAD,CAAUC,IAAKD,EAAG7B,SAAU4B,c,GAtB1Bf,IAAMC,WCnDJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCXAC,EAAQC,YAAe,CAC3BC,WAAY,CACRC,WAAY,2BAIlBC,IAASC,OACP,kBAAC,IAAD,CAAkBL,MAAOA,GACvB,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.a4c360dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\n\r\nclass Customer extends React.Component{\r\n  render() {\r\n    const customer = this.props.customer;\r\n    const img = this.props.customer.image+this.props.customer.id;\r\n    return ( \r\n      <TableRow>\r\n      <TableCell >{customer.id}</TableCell>\r\n        <TableCell ><img src={img}/></TableCell>\r\n        <TableCell >{customer.name}</TableCell>\r\n        <TableCell >{customer.age}</TableCell>\r\n        <TableCell >{customer.gender}</TableCell>\r\n        <TableCell >{customer.job}</TableCell>\r\n      </TableRow>\r\n    )\r\n  }\r\n} \r\nexport default Customer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Customer from './components/Customer'\n\nimport Table from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\nimport {withStyles} from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX:'auto'\n  },\n  table: {\n    minWidth:1080\n  }\n})\n\nconst customers = [\n  {\n    id: 1,\n    name: '홍길동',\n    image: 'https://placeimg.com/64/64/',\n    age: 19,\n    gender: '남',\n    job: '대학생'\n   },\n   {\n    id: 2,\n    name: '홍길서',\n    image: 'https://placeimg.com/64/64/',\n    age: 13,\n    gender: '남',\n    job: '대학생'\n   },\n   {\n    id: 3,\n    name: '홍길남',\n    image: 'https://placeimg.com/64/64/',\n    age: 15,\n    gender: '남',\n    job: '대학생'\n   },\n   {\n    id: 4,\n    name: '홍길북',\n    image: 'https://placeimg.com/64/64/',\n    age: 15,\n    gender: '남',\n    job: '대학생'\n   }\n];\n  \nconst head = [\n  'ID','사진','이름','나이','성별','직업'\n]\n \nclass App extends React.Component{\n  render() {\n    const classes = this.props;\n    console.log(classes)\n    return(\n    <Paper className={classes.root}>\n      <Table   className={classes.table}>\n        <TableHead>\n          <TableRow>\n            {\n              head.map((data,i) => {\n                return (\n                  <TableCell key={i}>{data}</TableCell>\n                );\n              })\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            customers.map((data,i) => {\n              return (\n                <Customer key={i} customer={data}></Customer>\n              );\n            })\n          }\n        </TableBody>\n        \n      </Table>\n      </Paper>\n    )\n  };\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  typography: {\n      fontFamily: '\"Noto Sans KR\", serif',\n  }\n})\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}